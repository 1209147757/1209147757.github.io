<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python爬虫学习笔记</title>
      <link href="2021/03/05/python-pa-chong-xue-xi-bi-ji/"/>
      <url>2021/03/05/python-pa-chong-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-网络请求"><a href="#第一章-网络请求" class="headerlink" title="第一章:网络请求"></a>第一章:网络请求</h1><h2 id="1-爬虫前奏"><a href="#1-爬虫前奏" class="headerlink" title="1-爬虫前奏"></a>1-爬虫前奏</h2><h3 id="爬虫的实际例子："><a href="#爬虫的实际例子：" class="headerlink" title="爬虫的实际例子："></a>爬虫的实际例子：</h3><ol><li>搜索引擎（百度、谷歌、360搜索等）。</li><li>伯乐在线。</li><li>惠惠购物助手。</li><li>数据分析与研究（数据冰山知乎专栏）。</li><li>抢票软件等。</li></ol><h3 id="什么是网络爬虫："><a href="#什么是网络爬虫：" class="headerlink" title="什么是网络爬虫："></a>什么是网络爬虫：</h3><ol><li>通俗理解：爬虫是一个模拟人类请求网站行为的程序。可以自动请求网页、并数据抓取下来，然后使用一定的规则提取有价值的数据。</li><li>专业介绍：<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin">百度百科</a>。</li></ol><h3 id="通用爬虫和聚焦爬虫："><a href="#通用爬虫和聚焦爬虫：" class="headerlink" title="通用爬虫和聚焦爬虫："></a>通用爬虫和聚焦爬虫：</h3><ol><li>通用爬虫：通用爬虫是搜索引擎抓取系统（百度、谷歌、搜狗等）的重要组成部分。主要是将互联网上的网页下载到本地，形成一个互联网内容的镜像备份。</li><li>聚焦爬虫：是面向特定需求的一种网络爬虫程序，他与通用爬虫的区别在于：聚焦爬虫在实施网页抓取的时候会对内容进行筛选和处理，尽量保证只抓取与需求相关的网页信息。</li></ol><h3 id="为什么用Python写爬虫程序："><a href="#为什么用Python写爬虫程序：" class="headerlink" title="为什么用Python写爬虫程序："></a>为什么用Python写爬虫程序：</h3><ol><li>PHP：PHP是世界是最好的语言，但他天生不是做这个的，而且对多线程、异步支持不是很好，并发处理能力弱。爬虫是工具性程序，对速度和效率要求比较高。</li><li>Java：生态圈很完善，是Python爬虫最大的竞争对手。但是Java语言本身很笨重，代码量很大。重构成本比较高，任何修改会导致代码大量改动。爬虫经常要修改采集代码。</li><li>C/C++：运行效率是无敌的。但是学习和开发成本高。写个小爬虫程序可能要大半天时间。</li><li>Python：语法优美、代码简洁、开发效率高、支持的模块多。相关的HTTP请求模块和HTML解析模块非常丰富。还有Scrapy和Scrapy-redis框架让我们开发爬虫变得异常简单。</li></ol><h3 id="准备工具："><a href="#准备工具：" class="headerlink" title="准备工具："></a>准备工具：</h3><ol><li>Python3.7开发环境。</li><li>Pycharm。</li><li>虚拟环境。<code>virtualenv/virtualenvwrapper</code>。</li></ol><h2 id="2-http协议和Chrome抓包工具"><a href="#2-http协议和Chrome抓包工具" class="headerlink" title="2-http协议和Chrome抓包工具"></a>2-http协议和Chrome抓包工具</h2><h3 id="什么是http和https协议："><a href="#什么是http和https协议：" class="headerlink" title="什么是http和https协议："></a>什么是http和https协议：</h3><p>HTTP协议：全称是<code>HyperText Transfer Protocol</code>，中文意思是超文本传输协议，是一种发布和接收HTML页面的方法。服务器端口号是<code>80</code>端口。 HTTPS协议：是HTTP协议的加密版本，在HTTP下加入了SSL层。服务器端口号是<code>443</code>端口。</p><h3 id="在浏览器中发送一个http请求的过程："><a href="#在浏览器中发送一个http请求的过程：" class="headerlink" title="在浏览器中发送一个http请求的过程："></a>在浏览器中发送一个http请求的过程：</h3><ol><li>当用户在浏览器的地址栏中输入一个URL并按回车键之后，浏览器会向HTTP服务器发送HTTP请求。HTTP请求主要分为“Get”和“Post”两种方法。</li><li>当我们在浏览器输入URL <a href="http://www.baidu.com/">http://www.baidu.com</a> 的时候，浏览器发送一个Request请求去获取 <a href="http://www.baidu.com/">http://www.baidu.com</a> 的html文件，服务器把Response文件对象发送回给浏览器。</li><li>浏览器分析Response中的 HTML，发现其中引用了很多其他文件，比如Images文件，CSS文件，JS文件。 浏览器会自动再次发送Request去获取图片，CSS文件，或者JS文件。</li><li>当所有的文件都下载成功后，网页会根据HTML语法结构，完整的显示出来了。</li></ol><h3 id="url详解："><a href="#url详解：" class="headerlink" title="url详解："></a>url详解：</h3><p><code>URL</code>是<code>Uniform Resource Locator</code>的简写，统一资源定位符。 一个<code>URL</code>由以下几部分组成：</p><pre class="line-numbers language-none"><code class="language-none">scheme:&#x2F;&#x2F;host:port&#x2F;path&#x2F;?query-string&#x3D;xxx#anchor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>scheme</strong>：代表的是访问的协议，一般为<code>http</code>或者<code>https</code>以及<code>ftp</code>等。</li><li><strong>host</strong>：主机名，域名，比如<code>www.baidu.com</code>。</li><li><strong>port</strong>：端口号。当你访问一个网站的时候，浏览器默认使用80端口。</li><li><strong>path</strong>：查找路径。比如：<code>www.jianshu.com/trending/now</code>，后面的<code>trending/now</code>就是<code>path</code>。</li><li><strong>query-string</strong>：查询字符串，比如：<code>www.baidu.com/s?wd=python</code>，后面的<code>wd=python</code>就是查询字符串。</li><li><strong>anchor</strong>：锚点，后台一般不用管，前端用来做页面定位的。</li></ul><p>在浏览器中请求一个<code>url</code>，浏览器会对这个url进行一个编码。除英文字母，数字和部分符号外，其他的全部使用百分号+十六进制码值进行编码。</p><h3 id="常用的请求方法："><a href="#常用的请求方法：" class="headerlink" title="常用的请求方法："></a>常用的请求方法：</h3><p>在<code>Http</code>协议中，定义了八种请求方法。这里介绍两种常用的请求方法，分别是<code>get</code>请求和<code>post</code>请求。</p><ol><li><code>get</code>请求：一般情况下，只从服务器获取数据下来，并不会对服务器资源产生任何影响的时候会使用<code>get</code>请求。</li><li><code>post</code>请求：向服务器发送数据（登录）、上传文件等，会对服务器资源产生影响的时候会使用<code>post</code>请求。 以上是在网站开发中常用的两种方法。并且一般情况下都会遵循使用的原则。但是有的网站和服务器为了做反爬虫机制，也经常会不按常理出牌，有可能一个应该使用<code>get</code>方法的请求就一定要改成<code>post</code>请求，这个要视情况而定。</li></ol><h3 id="请求头常见参数："><a href="#请求头常见参数：" class="headerlink" title="请求头常见参数："></a>请求头常见参数：</h3><p>在<code>http</code>协议中，向服务器发送一个请求，数据分为三部分，第一个是把数据放在url中，第二个是把数据放在<code>body</code>中（在<code>post</code>请求中），第三个就是把数据放在<code>head</code>中。这里介绍在网络爬虫中经常会用到的一些请求头参数：</p><ol><li><code>User-Agent</code>：浏览器名称。这个在网络爬虫中经常会被使用到。请求一个网页的时候，服务器通过这个参数就可以知道这个请求是由哪种浏览器发送的。如果我们是通过爬虫发送请求，那么我们的<code>User-Agent</code>就是<code>Python</code>，这对于那些有反爬虫机制的网站来说，可以轻易的判断你这个请求是爬虫。因此我们要经常设置这个值为一些浏览器的值，来伪装我们的爬虫。</li><li><code>Referer</code>：表明当前这个请求是从哪个<code>url</code>过来的。这个一般也可以用来做反爬虫技术。如果不是从指定页面过来的，那么就不做相关的响应。</li><li><code>Cookie</code>：<code>http</code>协议是无状态的。也就是同一个人发送了两次请求，服务器没有能力知道这两个请求是否来自同一个人。因此这时候就用<code>cookie</code>来做标识。一般如果想要做登录后才能访问的网站，那么就需要发送<code>cookie</code>信息了。</li></ol><h3 id="常见响应状态码："><a href="#常见响应状态码：" class="headerlink" title="常见响应状态码："></a>常见响应状态码：</h3><ol><li><code>200</code>：请求正常，服务器正常的返回数据。</li><li><code>301</code>：永久重定向。比如在访问<code>www.jingdong.com</code>的时候会重定向到<code>www.jd.com</code>。</li><li><code>302</code>：临时重定向。比如在访问一个需要登录的页面的时候，而此时没有登录，那么就会重定向到登录页面。</li><li><code>400</code>：请求的<code>url</code>在服务器上找不到。换句话说就是请求<code>url</code>错误。</li><li><code>403</code>：服务器拒绝访问，权限不够。</li><li><code>500</code>：服务器内部错误。可能是服务器出现<code>bug</code>了。</li></ol><h3 id="Chrome抓包工具："><a href="#Chrome抓包工具：" class="headerlink" title="Chrome抓包工具："></a>Chrome抓包工具：</h3><p><code>Chrome</code>浏览器是一个非常亲近开发者的浏览器。可以方便的查看网络请求以及发送的参数。对着网页<code>右键-&gt;检查</code>。然后就可以打开开发者选项。</p><h2 id="3-urllib库"><a href="#3-urllib库" class="headerlink" title="3-urllib库"></a>3-urllib库</h2><p><code>urllib</code>库是<code>Python</code>中一个最基本的网络请求库。可以模拟浏览器的行为，向指定的服务器发送一个请求，并可以保存服务器返回的数据。</p><h3 id="urlopen函数："><a href="#urlopen函数：" class="headerlink" title="urlopen函数："></a>urlopen函数：</h3><p>在<code>Python3</code>的<code>urllib</code>库中，所有和网络请求相关的方法，都被集到<code>urllib.request</code>模块下面了，以先来看下<code>urlopen</code>函数基本的使用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import requestresp &#x3D; request.urlopen(&#39;http:&#x2F;&#x2F;www.baidu.com&#39;)print(resp.read())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实际上，使用浏览器访问百度，右键查看源代码。你会发现，跟我们刚才打印出来的数据是一模一样的。也就是说，上面的三行代码就已经帮我们把百度的首页的全部代码爬下来了。一个基本的url请求对应的python代码真的非常简单。<br>以下对<code>urlopen</code>函数的进行详细讲解：</p><ol><li><code>url</code>：请求的url。</li><li><code>data</code>：请求的<code>data</code>，如果设置了这个值，那么将变成<code>post</code>请求。</li><li>返回值：返回值是一个<code>http.client.HTTPResponse</code>对象，这个对象是一个类文件句柄对象。有<code>read(size)</code>、<code>readline</code>、<code>readlines</code>以及<code>getcode</code>等方法。</li></ol><h3 id="urlretrieve函数："><a href="#urlretrieve函数：" class="headerlink" title="urlretrieve函数："></a>urlretrieve函数：</h3><p>这个函数可以方便的将网页上的一个文件保存到本地。以下代码可以非常方便的将百度的首页下载到本地：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import requestrequest.urlretrieve(&#39;http:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;,&#39;baidu.html&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="urlencode函数："><a href="#urlencode函数：" class="headerlink" title="urlencode函数："></a>urlencode函数：</h3><p>用浏览器发送请求的时候，如果url中包含了中文或者其他特殊字符，那么浏览器会自动的给我们进行编码。而如果使用代码发送请求，那么就必须手动的进行编码，这时候就应该使用<code>urlencode</code>函数来实现。<code>urlencode</code>可以把字典数据转换为<code>URL</code>编码的数据。示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import parsedata &#x3D; &#123;&#39;name&#39;:&#39;爬虫基础&#39;,&#39;greet&#39;:&#39;hello world&#39;,&#39;age&#39;:100&#125;qs &#x3D; parse.urlencode(data)print(qs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="parse-qs函数："><a href="#parse-qs函数：" class="headerlink" title="parse_qs函数："></a>parse_qs函数：</h3><p>可以将经过编码后的url参数进行解码。示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import parseqs &#x3D; &quot;name&#x3D;%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80&amp;greet&#x3D;hello+world&amp;age&#x3D;100&quot;print(parse.parse_qs(qs))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="urlparse和urlsplit："><a href="#urlparse和urlsplit：" class="headerlink" title="urlparse和urlsplit："></a>urlparse和urlsplit：</h3><p>有时候拿到一个url，想要对这个url中的各个组成部分进行分割，那么这时候就可以使用<code>urlparse</code>或者是<code>urlsplit</code>来进行分割。示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import request,parseurl &#x3D; &#39;http:&#x2F;&#x2F;www.baidu.com&#x2F;s?username&#x3D;python&#39;result &#x3D; parse.urlsplit(url)# result &#x3D; parse.urlparse(url)print(&#39;scheme:&#39;,result.scheme)print(&#39;netloc:&#39;,result.netloc)print(&#39;path:&#39;,result.path)print(&#39;query:&#39;,result.query)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>urlparse</code>和<code>urlsplit</code>基本上是一模一样的。唯一不一样的地方是，<code>urlparse</code>里面多了一个<code>params</code>属性，而<code>urlsplit</code>没有这个<code>params</code>属性。比如有一个<code>url</code>为：<code>url = &#39;http://www.baidu.com/s;hello?wd=python&amp;username=abc#1&#39;</code>，<br>那么<code>urlparse</code>可以获取到<code>hello</code>，而<code>urlsplit</code>不可以获取到。<code>url</code>中的<code>params</code>也用得比较少。</p><h3 id="request-Request类："><a href="#request-Request类：" class="headerlink" title="request.Request类："></a>request.Request类：</h3><p>如果想要在请求的时候增加一些请求头，那么就必须使用<code>request.Request</code>类来实现。比如要增加一个<code>User-Agent</code>，示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import requestheaders &#x3D; &#123;&#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;62.0.3202.94 Safari&#x2F;537.36&#39;&#125;req &#x3D; request.Request(&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;,headers&#x3D;headers)resp &#x3D; request.urlopen(req)print(resp.read())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ProxyHandler处理器（代理设置）"><a href="#ProxyHandler处理器（代理设置）" class="headerlink" title="ProxyHandler处理器（代理设置）"></a>ProxyHandler处理器（代理设置）</h3><p>很多网站会检测某一段时间某个IP的访问次数(通过流量统计，系统日志等)，如果访问次数多的不像正常人，它会禁止这个IP的访问。<br>所以我们可以设置一些代理服务器，每隔一段时间换一个代理，就算IP被禁止，依然可以换个IP继续爬取。<br>urllib中通过ProxyHandler来设置使用代理服务器，下面代码说明如何使用自定义opener来使用代理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import request# 这个是没有使用代理的# resp &#x3D; request.urlopen(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)# print(resp.read().decode(&quot;utf-8&quot;))# 这个是使用了代理的handler &#x3D; request.ProxyHandler(&#123;&quot;http&quot;:&quot;218.66.161.88:31769&quot;&#125;)opener &#x3D; request.build_opener(handler)req &#x3D; request.Request(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;ip&quot;)resp &#x3D; opener.open(req)print(resp.read())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用的代理有：</p><ul><li>西刺免费代理IP：<a href="http://www.xicidaili.com/">http://www.xicidaili.com/</a></li><li>快代理：<a href="http://www.kuaidaili.com/">http://www.kuaidaili.com/</a></li><li>代理云：<a href="http://www.dailiyun.com/">http://www.dailiyun.com/</a></li></ul><h3 id="什么是cookie："><a href="#什么是cookie：" class="headerlink" title="什么是cookie："></a>什么是cookie：</h3><p>在网站中，http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知道当前请求是哪个用户。<code>cookie</code>的出现就是为了解决这个问题，第一次登录后服务器返回一些数据（cookie）给浏览器，然后浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的<code>cookie</code>数据自动的携带给服务器，服务器通过浏览器携带的数据就能判断当前用户是哪个了。<code>cookie</code>存储的数据量有限，不同的浏览器有不同的存储大小，但一般不超过4KB。因此使用<code>cookie</code>只能存储一些小量的数据。</p><h4 id="cookie的格式："><a href="#cookie的格式：" class="headerlink" title="cookie的格式："></a>cookie的格式：</h4><pre class="line-numbers language-none"><code class="language-none">Set-Cookie: NAME&#x3D;VALUE；Expires&#x2F;Max-age&#x3D;DATE；Path&#x3D;PATH；Domain&#x3D;DOMAIN_NAME；SECURE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数意义：</p><ul><li>NAME：cookie的名字。</li><li>VALUE：cookie的值。</li><li>Expires：cookie的过期时间。</li><li>Path：cookie作用的路径。</li><li>Domain：cookie作用的域名。</li><li>SECURE：是否只在https协议下起作用。</li></ul><h3 id="使用cookielib库和HTTPCookieProcessor模拟登录："><a href="#使用cookielib库和HTTPCookieProcessor模拟登录：" class="headerlink" title="使用cookielib库和HTTPCookieProcessor模拟登录："></a>使用cookielib库和HTTPCookieProcessor模拟登录：</h3><p>Cookie 是指网站服务器为了辨别用户身份和进行Session跟踪，而储存在用户浏览器上的文本文件，Cookie可以保持登录信息到用户下次与服务器的会话。<br>这里以人人网为例。人人网中，要访问某个人的主页，必须先登录才能访问，登录说白了就是要有cookie信息。那么如果我们想要用代码的方式访问，就必须要有正确的cookie信息才能访问。解决方案有两种，第一种是使用浏览器访问，然后将cookie信息复制下来，放到headers中。示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import requestheaders &#x3D; &#123;    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;62.0.3202.94 Safari&#x2F;537.36&#39;,    &#39;Cookie&#39;: &#39;anonymid&#x3D;jacdwz2x-8bjldx; depovince&#x3D;GW; _r01_&#x3D;1; _ga&#x3D;GA1.2.1455063316.1511436360; _gid&#x3D;GA1.2.862627163.1511436360; wp&#x3D;1; JSESSIONID&#x3D;abczwY8ecd4xz8RJcyP-v; jebecookies&#x3D;d4497791-9d41-4269-9e2b-3858d4989785|||||; ick_login&#x3D;884e75d4-f361-4cff-94bb-81fe6c42b220; _de&#x3D;EA5778F44555C091303554EBBEB4676C696BF75400CE19CC; p&#x3D;61a3c7d0d4b2d1e991095353f83fa2141; first_login_flag&#x3D;1; ln_uact&#x3D;970138074@qq.com; ln_hurl&#x3D;http:&#x2F;&#x2F;hdn.xnimg.cn&#x2F;photos&#x2F;hdn121&#x2F;20170428&#x2F;1700&#x2F;main_nhiB_aebd0000854a1986.jpg; t&#x3D;3dd84a3117737e819dd2c32f1cdb91d01; societyguester&#x3D;3dd84a3117737e819dd2c32f1cdb91d01; id&#x3D;443362311; xnsid&#x3D;169efdc0; loginfrom&#x3D;syshome; ch_id&#x3D;10016; jebe_key&#x3D;9c062f5a-4335-4a91-bf7a-970f8b86a64e%7Ca022c303305d1b2ab6b5089643e4b5de%7C1511449232839%7C1; wp_fold&#x3D;0&#39;&#125;url &#x3D; &#39;http:&#x2F;&#x2F;www.renren.com&#x2F;880151247&#x2F;profile&#39;req &#x3D; request.Request(url,headers&#x3D;headers)resp &#x3D; request.urlopen(req)with open(&#39;renren.html&#39;,&#39;w&#39;) as fp:    fp.write(resp.read().decode(&#39;utf-8&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是每次在访问需要cookie的页面都要从浏览器中复制cookie比较麻烦。在Python处理Cookie，一般是通过<code>http.cookiejar</code>模块和<code>urllib模块的HTTPCookieProcessor</code>处理器类一起使用。<code>http.cookiejar</code>模块主要作用是提供用于存储cookie的对象。而<code>HTTPCookieProcessor</code>处理器主要作用是处理这些cookie对象，并构建handler对象。</p><h4 id="http-cookiejar模块："><a href="#http-cookiejar模块：" class="headerlink" title="http.cookiejar模块："></a>http.cookiejar模块：</h4><p>该模块主要的类有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。这四个类的作用分别如下：</p><ol><li>CookieJar：管理HTTP cookie值、存储HTTP请求生成的cookie、向传出的HTTP请求添加cookie的对象。整个cookie都存储在内存中，对CookieJar实例进行垃圾回收后cookie也将丢失。</li><li>FileCookieJar (filename,delayload=None,policy=None)：从CookieJar派生而来，用来创建FileCookieJar实例，检索cookie信息并将cookie存储到文件中。filename是存储cookie的文件名。delayload为True时支持延迟访问访问文件，即只有在需要时才读取文件或在文件中存储数据。</li><li>MozillaCookieJar (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与Mozilla浏览器 cookies.txt兼容的FileCookieJar实例。</li><li>LWPCookieJar (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与libwww-perl标准的 Set-Cookie3 文件格式兼容的FileCookieJar实例。</li></ol><h4 id="登录人人网："><a href="#登录人人网：" class="headerlink" title="登录人人网："></a>登录人人网：</h4><p>利用<code>http.cookiejar</code>和<code>request.HTTPCookieProcessor</code>登录人人网。相关示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import request,parsefrom http.cookiejar import CookieJarheaders &#x3D; &#123;    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;62.0.3202.94 Safari&#x2F;537.36&#39;&#125;def get_opener():    cookiejar &#x3D; CookieJar()    handler &#x3D; request.HTTPCookieProcessor(cookiejar)    opener &#x3D; request.build_opener(handler)    return openerdef login_renren(opener):    data &#x3D; &#123;&quot;email&quot;: &quot;你的人人账号&quot;, &quot;password&quot;: &quot;你的人人密码&quot;&#125;    data &#x3D; parse.urlencode(data).encode(&#39;utf-8&#39;)    login_url &#x3D; &quot;http:&#x2F;&#x2F;www.renren.com&#x2F;PLogin.do&quot;    req &#x3D; request.Request(login_url, headers&#x3D;headers, data&#x3D;data)    opener.open(req)def visit_profile(opener):    url &#x3D; &#39;http:&#x2F;&#x2F;www.renren.com&#x2F;880151247&#x2F;profile&#39;    req &#x3D; request.Request(url,headers&#x3D;headers)    resp &#x3D; opener.open(req)    with open(&#39;renren.html&#39;,&#39;w&#39;) as fp:        fp.write(resp.read().decode(&quot;utf-8&quot;))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    opener &#x3D; get_opener()    login_renren(opener)    visit_profile(opener)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="保存cookie到本地："><a href="#保存cookie到本地：" class="headerlink" title="保存cookie到本地："></a>保存cookie到本地：</h4><p>保存<code>cookie</code>到本地，可以使用<code>cookiejar</code>的<code>save</code>方法，并且需要指定一个文件名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import requestfrom http.cookiejar import MozillaCookieJarcookiejar &#x3D; MozillaCookieJar(&quot;cookie.txt&quot;)handler &#x3D; request.HTTPCookieProcessor(cookiejar)opener &#x3D; request.build_opener(handler)headers &#x3D; &#123;    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;62.0.3202.94 Safari&#x2F;537.36&#39;&#125;req &#x3D; request.Request(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;cookies&#39;,headers&#x3D;headers)resp &#x3D; opener.open(req)print(resp.read())cookiejar.save(ignore_discard&#x3D;True,ignore_expires&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="从本地加载cookie："><a href="#从本地加载cookie：" class="headerlink" title="从本地加载cookie："></a>从本地加载cookie：</h4><p>从本地加载<code>cookie</code>，需要使用<code>cookiejar</code>的<code>load</code>方法，并且也需要指定方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from urllib import requestfrom http.cookiejar import MozillaCookieJarcookiejar &#x3D; MozillaCookieJar(&quot;cookie.txt&quot;)cookiejar.load(ignore_expires&#x3D;True,ignore_discard&#x3D;True)handler &#x3D; request.HTTPCookieProcessor(cookiejar)opener &#x3D; request.build_opener(handler)headers &#x3D; &#123;    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;62.0.3202.94 Safari&#x2F;537.36&#39;&#125;req &#x3D; request.Request(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;cookies&#39;,headers&#x3D;headers)resp &#x3D; opener.open(req)print(resp.read())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-requests库"><a href="#4-requests库" class="headerlink" title="4-requests库"></a>4-requests库</h2><p>虽然Python的标准库中 urllib模块已经包含了平常我们使用的大多数功能，但是它的 API 使用起来让人感觉不太好，而 Requests宣传是 “HTTP for Humans”，说明使用更简洁方便。</p><h3 id="安装和文档地址："><a href="#安装和文档地址：" class="headerlink" title="安装和文档地址："></a>安装和文档地址：</h3><p>利用<code>pip</code>可以非常方便的安装：</p><pre class="line-numbers language-none"><code class="language-none">pip install requests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中文文档：<a href="http://docs.python-requests.org/zh_CN/latest/index.html">http://docs.python-requests.org/zh_CN/latest/index.html</a><br>github地址：<a href="https://github.com/requests/requests">https://github.com/requests/requests</a></p><h3 id="发送GET请求："><a href="#发送GET请求：" class="headerlink" title="发送GET请求："></a>发送GET请求：</h3><ol><li>最简单的发送<code>get</code>请求就是通过<code>requests.get</code>来调用：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">response &#x3D; requests.get(&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>添加headers和查询参数：<br>如果想添加 headers，可以传入headers参数来增加请求头中的headers信息。如果要将参数放在url中传递，可以利用 params 参数。相关示例代码如下：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">import requests   kw &#x3D; &#123;&#39;wd&#39;:&#39;中国&#39;&#125;   headers &#x3D; &#123;&quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;54.0.2840.99 Safari&#x2F;537.36&quot;&#125;   # params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()response &#x3D; requests.get(&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;s&quot;, params &#x3D; kw, headers &#x3D; headers)   # 查看响应内容，response.text 返回的是Unicode格式的数据print(response.text)   # 查看响应内容，response.content返回的字节流数据print(response.content)   # 查看完整url地址print(response.url)   # 查看响应头部字符编码print(response.encoding)   # 查看响应码print(response.status_code)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发送POST请求："><a href="#发送POST请求：" class="headerlink" title="发送POST请求："></a>发送POST请求：</h3><ol><li>最基本的POST请求可以使用<code>post</code>方法：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">response &#x3D; requests.post(&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;,data&#x3D;data)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>传入data数据：<br>这时候就不要再使用<code>urlencode</code>进行编码了，直接传入一个字典进去就可以了。比如请求拉勾网的数据的代码：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">import requests   url &#x3D; &quot;https:&#x2F;&#x2F;www.lagou.com&#x2F;jobs&#x2F;positionAjax.json?city&#x3D;%E6%B7%B1%E5%9C%B3&amp;needAddtionalResult&#x3D;false&amp;isSchoolJob&#x3D;0&quot;   headers &#x3D; &#123;    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;62.0.3202.94 Safari&#x2F;537.36&#39;,    &#39;Referer&#39;: &#39;https:&#x2F;&#x2F;www.lagou.com&#x2F;jobs&#x2F;list_python?labelWords&#x3D;&amp;fromSearch&#x3D;true&amp;suginput&#x3D;&#39;&#125;   data &#x3D; &#123;    &#39;first&#39;: &#39;true&#39;,    &#39;pn&#39;: 1,    &#39;kd&#39;: &#39;python&#39;&#125;   resp &#x3D; requests.post(url,headers&#x3D;headers,data&#x3D;data)# 如果是json数据，直接可以调用json方法print(resp.json())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用代理："><a href="#使用代理：" class="headerlink" title="使用代理："></a>使用代理：</h3><p>使用<code>requests</code>添加代理也非常简单，只要在请求的方法中（比如<code>get</code>或者<code>post</code>）传递<code>proxies</code>参数就可以了。示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;headers &#x3D; &#123;    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;62.0.3202.94 Safari&#x2F;537.36&#39;,&#125;proxy &#x3D; &#123;    &#39;http&#39;: &#39;171.14.209.180:27829&#39;&#125;resp &#x3D; requests.get(url,headers&#x3D;headers,proxies&#x3D;proxy)with open(&#39;xx.html&#39;,&#39;w&#39;,encoding&#x3D;&#39;utf-8&#39;) as fp:    fp.write(resp.text)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cookie："><a href="#cookie：" class="headerlink" title="cookie："></a>cookie：</h3><p>如果在一个响应中包含了<code>cookie</code>，那么可以利用<code>cookies</code>属性拿到这个返回的<code>cookie</code>值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;www.renren.com&#x2F;PLogin.do&quot;data &#x3D; &#123;&quot;email&quot;:&quot;970138074@qq.com&quot;,&#39;password&#39;:&quot;pythonspider&quot;&#125;resp &#x3D; requests.get(&#39;http:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;)print(resp.cookies)print(resp.cookies.get_dict())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="session："><a href="#session：" class="headerlink" title="session："></a>session：</h3><p>之前使用<code>urllib</code>库，是可以使用<code>opener</code>发送多个请求，多个请求之间是可以共享<code>cookie</code>的。那么如果使用<code>requests</code>，也要达到共享<code>cookie</code>的目的，那么可以使用<code>requests</code>库给我们提供的<code>session</code>对象。注意，这里的<code>session</code>不是web开发中的那个session，这个地方只是一个会话的对象而已。还是以登录人人网为例，使用<code>requests</code>来实现。示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;www.renren.com&#x2F;PLogin.do&quot;data &#x3D; &#123;&quot;email&quot;:&quot;970138074@qq.com&quot;,&#39;password&#39;:&quot;pythonspider&quot;&#125;headers &#x3D; &#123;    &#39;User-Agent&#39;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;62.0.3202.94 Safari&#x2F;537.36&quot;&#125;# 登录session &#x3D; requests.session()session.post(url,data&#x3D;data,headers&#x3D;headers)# 访问大鹏个人中心resp &#x3D; session.get(&#39;http:&#x2F;&#x2F;www.renren.com&#x2F;880151247&#x2F;profile&#39;)print(resp.text)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理不信任的SSL证书："><a href="#处理不信任的SSL证书：" class="headerlink" title="处理不信任的SSL证书："></a>处理不信任的SSL证书：</h3><p>对于那些已经被信任的SSL整数的网站，比如<code>https://www.baidu.com/</code>，那么使用<code>requests</code>直接就可以正常的返回响应。示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">resp &#x3D; requests.get(&#39;http:&#x2F;&#x2F;www.12306.cn&#x2F;mormhweb&#x2F;&#39;,verify&#x3D;False)print(resp.content.decode())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python爬虫第一章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis框架</title>
      <link href="2021/01/09/mybatis-kuang-jia/"/>
      <url>2021/01/09/mybatis-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1.1、什么是Mybatis"></a>1.1、什么是Mybatis</h3><p><img src="https://img.imgdb.cn/item/5ff896a53ffa7d37b36705c1.png"></p><ul><li>MyBatis 是一款优秀的<strong>持久层框架</strong></li><li>它支持定制化 SQL、存储过程以及高级映射。</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li><li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li><li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。</li><li>2013年11月迁移到Github。</li></ul><p>如何获得Mybatis？</p><ul><li><p>maven仓库：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Github ： <a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p></li><li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul><h3 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h3><p>数据持久化</p><ul><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li><li>内存：<strong>断电即失</strong></li><li>数据库(Jdbc)，io文件持久化。</li><li>生活：冷藏. 罐头。</li></ul><p><strong>为什么需要需要持久化？</strong></p><ul><li><p>有一些对象，不能让他丢掉。</p></li><li><p>内存太贵了</p></li></ul><h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><p>Dao层，Service层，Controller层….</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显。</li></ul><h3 id="1-4-为什么需要Mybatis？"><a href="#1-4-为什么需要Mybatis？" class="headerlink" title="1.4 为什么需要Mybatis？"></a>1.4 为什么需要Mybatis？</h3><ul><li>帮助程序猿将数据存入到数据库中。</li><li>方便</li><li>传统的JDBC代码太复杂了。简化。框架。自动化。</li><li>不用Mybatis也可以。更容易上手。 <strong>技术没有高低之分</strong></li><li>优点：<ul><li>简单易学</li><li>灵活</li><li>sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul></li></ul><p><strong>最重要的一点：使用的人多！</strong></p><p>Spring   SpringMVC    SpringBoot</p><h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p>思路：搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试！</p><h3 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2.1、搭建环境"></a>2.1、搭建环境</h3><p>搭建数据库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">CREATE DATABASE &#96;mybatis&#96;;USE &#96;mybatis&#96;;CREATE TABLE &#96;user&#96;(  &#96;id&#96; INT(20) NOT NULL PRIMARY KEY,  &#96;name&#96; VARCHAR(30) DEFAULT NULL,  &#96;pwd&#96; VARCHAR(30) DEFAULT NULL)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8;INSERT INTO &#96;user&#96;(&#96;id&#96;,&#96;name&#96;,&#96;pwd&#96;) VALUES (1,&#39;狂神&#39;,&#39;123456&#39;),(2,&#39;张三&#39;,&#39;123456&#39;),(3,&#39;李四&#39;,&#39;123890&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建项目</p><ol><li><p>新建一个普通的maven项目</p></li><li><p>删除src目录</p></li><li><p>导入maven依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">   <span class="token comment">&lt;!--导入依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--mysql驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--mybatis--></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--junit--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h3><ul><li><p>编写mybatis的核心配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--configuration核心配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写mybatis工具类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;sqlSessionFactory --&gt; sqlSessionpublic class MybatisUtils &#123;    private static SqlSessionFactory sqlSessionFactory;    static&#123;        try &#123;            &#x2F;&#x2F;使用Mybatis第一步：获取sqlSessionFactory对象            String resource &#x3D; &quot;mybatis-config.xml&quot;;            InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);            sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    &#x2F;&#x2F;既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。    &#x2F;&#x2F; SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。    public static SqlSession  getSqlSession()&#123;        return sqlSessionFactory.openSession();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h3><ul><li><p>实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.pojo;&#x2F;&#x2F;实体类public class User &#123;    private int id;    private String name;    private String pwd;    public User() &#123;    &#125;    public User(int id, String name, String pwd) &#123;        this.id &#x3D; id;        this.name &#x3D; name;        this.pwd &#x3D; pwd;    &#125;    public int getId() &#123;        return id;    &#125;    public void setId(int id) &#123;        this.id &#x3D; id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;    public String getPwd() &#123;        return pwd;    &#125;    public void setPwd(String pwd) &#123;        this.pwd &#x3D; pwd;    &#125;    @Override    public String toString() &#123;        return &quot;User&#123;&quot; +                &quot;id&#x3D;&quot; + id +                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, pwd&#x3D;&#39;&quot; + pwd + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Dao接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserDao &#123;    List&lt;User&gt; getUserList();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>接口实现类由原来的UserDaoImpl转变为一个 Mapper配置文件.</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>        <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>                <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>                <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--select查询语句--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select * from mybatis.user   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3><p>注意点：</p><p>org.apache.ibatis.binding.BindingException: Type interface com.kuang.dao.UserDao is not known to the MapperRegistry.</p><p><strong>MapperRegistry是什么？</strong></p><p>核心配置文件中注册 mappers</p><ul><li><p>junit测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void test()&#123;    &#x2F;&#x2F;第一步：获得SqlSession对象    SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();    &#x2F;&#x2F;方式一：getMapper    UserDao userDao &#x3D; sqlSession.getMapper(UserDao.class);    List&lt;User&gt; userList &#x3D; userDao.getUserList();    for (User user : userList) &#123;        System.out.println(user);    &#125;    &#x2F;&#x2F;关闭SqlSession    sqlSession.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>你们可以能会遇到的问题：</p><ol><li>配置文件没有注册</li><li>绑定接口错误。</li><li>方法名不对</li><li>返回类型不对</li><li>Maven导出资源问题</li></ol><h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><h3 id="1、namespace"><a href="#1、namespace" class="headerlink" title="1、namespace"></a>1、namespace</h3><p>namespace中的包名要和 Dao/mapper 接口的包名一致！</p><h3 id="2、select"><a href="#2、select" class="headerlink" title="2、select"></a>2、select</h3><p>选择，查询语句;</p><ul><li>id : 就是对应的namespace中的方法名；</li><li>resultType：Sql语句执行的返回值！</li><li>parameterType ： 参数类型！</li></ul><ol><li><p>编写接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;根据ID查询用户User getUserById(int id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>编写对应的mapper中的sql语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;select id&#x3D;&quot;getUserById&quot; parameterType&#x3D;&quot;int&quot; resultType&#x3D;&quot;com.kuang.pojo.User&quot;&gt;        select * from mybatis.user where id &#x3D; #&#123;id&#125;&lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void getUserById() &#123;    SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();       UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);       User user &#x3D; mapper.getUserById(1);    System.out.println(user);       sqlSession.close();&#125;   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="3、Insert"><a href="#3、Insert" class="headerlink" title="3、Insert"></a>3、Insert</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--对象中的属性，可以直接取出来--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、update"><a href="#4、update" class="headerlink" title="4、update"></a>4、update</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125;  where id = #&#123;id&#125; ;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5、Delete"><a href="#5、Delete" class="headerlink" title="5、Delete"></a>5、Delete</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from mybatis.user where id = #&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意点：</p><ul><li>增删改需要提交事务！</li></ul><h3 id="6、分析错误"><a href="#6、分析错误" class="headerlink" title="6、分析错误"></a>6、分析错误</h3><ul><li>标签不要匹配错</li><li>resource 绑定mapper，需要使用路径！</li><li>程序配置文件必须符合规范！</li><li>NullPointerException，没有注册到资源!</li><li>输出的xml文件中存在中文乱码问题！</li><li>maven资源没有导出问题！</li></ul><h3 id="7、万能Map"><a href="#7、万能Map" class="headerlink" title="7、万能Map"></a>7、万能Map</h3><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;万能的Mapint addUser2(Map&lt;String,Object&gt; map);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--对象中的属性，可以直接取出来    传递map的key--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into mybatis.user (id, pwd) values (#&#123;userid&#125;,#&#123;passWord&#125;);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">@Testpublic void addUser2()&#123;    SqlSession sqlSession = MybatisUtils.getSqlSession();    UserMapper mapper = sqlSession.getMapper(UserMapper.class);    Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">Object</span><span class="token punctuation">></span></span> map = new HashMap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">Object</span><span class="token punctuation">></span></span>();    map.put("userid",5);    map.put("passWord","2222333");    mapper.addUser2(map);    sqlSession.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Map传递参数，直接在sql中取出key即可！    【parameterType=”map”】</p><p>对象传递参数，直接在sql中取对象的属性即可！【parameterType=”Object”】</p><p>只有一个基本类型参数的情况下，可以直接在sql中取到！</p><p>多个参数用Map，<strong>或者注解！</strong></p><h3 id="8、思考题"><a href="#8、思考题" class="headerlink" title="8、思考题"></a>8、思考题</h3><p>模糊查询怎么写？</p><ol><li><p>Java代码执行的时候，传递通配符 % %</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">List&lt;User&gt; userList &#x3D; mapper.getUserLike(&quot;%李%&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在sql拼接中使用通配符！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h3 id="1、核心配置文件"><a href="#1、核心配置文件" class="headerlink" title="1、核心配置文件"></a>1、核心配置文件</h3><ul><li><p>mybatis-config.xml</p></li><li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">configuration（配置）properties（属性）settings（设置）typeAliases（类型别名）typeHandlers（类型处理器）objectFactory（对象工厂）plugins（插件）environments（环境配置）environment（环境变量）transactionManager（事务管理器）dataSource（数据源）databaseIdProvider（数据库厂商标识）mappers（映射器）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、环境配置（environments）"><a href="#2、环境配置（environments）" class="headerlink" title="2、环境配置（environments）"></a>2、环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>学会使用配置多套运行环境！</p><p>Mybatis默认的事务管理器就是 JDBC  ， 连接池 ： POOLED</p><h3 id="3、属性（properties）"><a href="#3、属性（properties）" class="headerlink" title="3、属性（properties）"></a>3、属性（properties）</h3><p>我们可以通过properties属性来实现引用配置文件</p><p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。【db.properties】</p><p><img src="https://img.imgdb.cn/item/5ff896dc3ffa7d37b3671fc8.png"></p><p>编写一个配置文件</p><p>db.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">driver&#x3D;com.mysql.jdbc.Driverurl&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8username&#x3D;rootpassword&#x3D;123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在核心配置文件中映入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--引入外部配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>11111<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以直接引入外部文件</li><li>可以在其中增加一些属性配置</li><li>如果两个文件有同一个字段，优先使用外部配置文件的！</li></ul><h3 id="4、类型别名（typeAliases）"><a href="#4、类型别名（typeAliases）" class="headerlink" title="4、类型别名（typeAliases）"></a>4、类型别名（typeAliases）</h3><ul><li>类型别名是为 Java 类型设置一个短的名字。‘</li><li>存在的意义仅在于用来减少类完全限定名的冗余。</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--可以给实体类起别名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><p>扫描实体类的包，它的默认别名就为这个类的 类名，首字母小写！</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--可以给实体类起别名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在实体类比较少的时候，使用第一种方式。</p><p>如果实体类十分多，建议使用第二种。</p><p>第一种可以DIY别名，第二种则·不行·，如果非要改，需要在实体上增加注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Alias(&quot;user&quot;)public class User &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5、设置"><a href="#5、设置" class="headerlink" title="5、设置"></a>5、设置</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 </p><p><img src="https://img.imgdb.cn/item/5ff897933ffa7d37b36754de.png"></p><h3 id="6、其他配置"><a href="#6、其他配置" class="headerlink" title="6、其他配置"></a>6、其他配置</h3><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li>plugins插件<ul><li>mybatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ul></li></ul><h3 id="7、映射器（mappers）"><a href="#7、映射器（mappers）" class="headerlink" title="7、映射器（mappers）"></a>7、映射器（mappers）</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p><p>方式一： 【推荐使用】</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/kuang/dao/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方式二：使用class文件绑定注册</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意点：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><p>方式三：使用扫描包进行注入绑定</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意点：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><p>练习时间：</p><ul><li>将数据库配置文件外部引入</li><li>实体类别名</li><li>保证UserMapper 接口 和 UserMapper .xml 改为一致！并且放在同一个包下！</li></ul><h3 id="8、生命周期和作用域"><a href="#8、生命周期和作用域" class="headerlink" title="8、生命周期和作用域"></a>8、生命周期和作用域</h3><p><img src="https://img.imgdb.cn/item/5ff897a23ffa7d37b3675893.png"></p><p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p><strong>SqlSessionFactoryBuilder：</strong></p><ul><li>一旦创建了 SqlSessionFactory，就不再需要它了</li><li>局部变量</li></ul><p><strong>SqlSessionFactory：</strong></p><ul><li>说白了就是可以想象为 ：数据库连接池</li><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong> </li><li>因此 SqlSessionFactory 的最佳作用域是应用作用域。 </li><li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li></ul><p><strong>SqlSession</strong></p><ul><li>连接到连接池的一个请求！</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li><li>用完之后需要赶紧关闭，否则资源被占用！</li></ul><p><img src="https://img.imgdb.cn/item/5ff897b23ffa7d37b367602e.png"></p><p>这里面的每一个Mapper，就代表一个具体的业务！</p><h2 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h2><h3 id="1、-问题"><a href="#1、-问题" class="headerlink" title="1、 问题"></a>1、 问题</h3><p>数据库中的字段</p><p><img src="https://img.imgdb.cn/item/5ff897c53ffa7d37b3676b3e.png"></p><p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class User &#123;        private int id;    private String name;    private String password;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试出现问题</p><p><img src="https://img.imgdb.cn/item/5ff897e23ffa7d37b3677a54.png"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//    select * from mybatis.user where id = #&#123;id&#125;//类型处理器//    select id,name,pwd from mybatis.user where id = #&#123;id&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解决方法：</p><ul><li><p>起别名</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、resultMap"><a href="#2、resultMap" class="headerlink" title="2、resultMap"></a>2、resultMap</h3><p>结果集映射</p><pre class="line-numbers language-none"><code class="language-none">id   name   pwdid   name   password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--结果集映射--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--column数据库中的字段，property实体类中的属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li><li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li><li><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</li><li> 如果世界总是这么简单就好了。</li></ul><h2 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h2><h3 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h3><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！</p><p>曾经：sout 、debug</p><p>现在：日志工厂！</p><p><img src="https://img.imgdb.cn/item/5ff897e23ffa7d37b3677a5d.png"></p><ul><li><p>SLF4J </p></li><li><p>LOG4J  【掌握】</p></li><li><p>LOG4J2</p></li><li><p> JDK_LOGGING</p></li><li><p>COMMONS_LOGGING</p></li><li><p>STDOUT_LOGGING   【掌握】</p></li><li><p>NO_LOGGING</p></li></ul><p>在Mybatis中具体使用那个一日志实现，在设置中设定！</p><p><strong>STDOUT_LOGGING标准日志输出</strong></p><p>在mybatis核心配置文件中，配置我们的日志！</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img.imgdb.cn/item/5ff897e23ffa7d37b3677a63.png"></p><h3 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h3><p>什么是Log4j？</p><ul><li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件</li><li>我们也可以控制每一条日志的输出格式；</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li><li>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li></ul><ol><li><p>先导入log4j的包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>log4j.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码log4j.rootLogger&#x3D;DEBUG,console,file#控制台输出的相关设置log4j.appender.console &#x3D; org.apache.log4j.ConsoleAppenderlog4j.appender.console.Target &#x3D; System.outlog4j.appender.console.Threshold&#x3D;DEBUGlog4j.appender.console.layout &#x3D; org.apache.log4j.PatternLayoutlog4j.appender.console.layout.ConversionPattern&#x3D;[%c]-%m%n#文件输出的相关设置log4j.appender.file &#x3D; org.apache.log4j.RollingFileAppenderlog4j.appender.file.File&#x3D;.&#x2F;log&#x2F;kuang.loglog4j.appender.file.MaxFileSize&#x3D;10mblog4j.appender.file.Threshold&#x3D;DEBUGlog4j.appender.file.layout&#x3D;org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern&#x3D;[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n#日志输出级别log4j.logger.org.mybatis&#x3D;DEBUGlog4j.logger.java.sql&#x3D;DEBUGlog4j.logger.java.sql.Statement&#x3D;DEBUGlog4j.logger.java.sql.ResultSet&#x3D;DEBUGlog4j.logger.java.sql.PreparedStatement&#x3D;DEBUG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置log4j为日志的实现</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Log4j的使用！，直接测试运行刚才的查询</p><p><img src="https://img.imgdb.cn/item/5ff897e23ffa7d37b3677a66.png"></p></li></ol><p><strong>简单使用</strong></p><ol><li><p>在要使用Log4j 的类中，导入包  import org.apache.log4j.Logger;</p></li><li><p>日志对象，参数为当前类的class</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">static Logger logger &#x3D; Logger.getLogger(UserDaoTest.class);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>日志级别</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">logger.info(&quot;info:进入了testLog4j&quot;);logger.debug(&quot;debug:进入了testLog4j&quot;);logger.error(&quot;error:进入了testLog4j&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><p><strong>思考：为什么要分页？</strong></p><ul><li>减少数据的处理量</li></ul><h3 id="7-1、使用Limit分页"><a href="#7-1、使用Limit分页" class="headerlink" title="7.1、使用Limit分页"></a>7.1、使用Limit分页</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">语法：SELECT * from user limit startIndex,pageSize;SELECT * from user limit 3;  #[0,n]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用Mybatis实现分页，核心SQL</p><ol><li><p>接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;分页List&lt;User&gt; getUserByLimit(Map&lt;String,Integer&gt; map);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Mapper.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--//分页--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserByLimit<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from  mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void getUserByLimit()&#123;SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);HashMap&lt;String, Integer&gt; map &#x3D; new HashMap&lt;String, Integer&gt;();    map.put(&quot;startIndex&quot;,1);    map.put(&quot;pageSize&quot;,2);    List&lt;User&gt; userList &#x3D;  mapper.getUserByLimit(map);    for (User user : userList) &#123;    System.out.println(user);    &#125;    sqlSession.close();    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7.2、RowBounds分页"></a>7.2、RowBounds分页</h3><p>不再使用SQL实现分页</p><ol><li><p>接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;分页2List&lt;User&gt; getUserByRowBounds();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>mapper.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--分页2--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserByRowBounds<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from  mybatis.user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void getUserByRowBounds()&#123;SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();&#x2F;&#x2F;RowBounds实现RowBounds rowBounds &#x3D; new RowBounds(1, 2);&#x2F;&#x2F;通过Java代码层面实现分页List&lt;User&gt; userList &#x3D; sqlSession.selectList(&quot;com.kuang.dao.UserMapper.getUserByRowBounds&quot;,null,rowBounds);    for (User user : userList) &#123;    System.out.println(user);    &#125;    sqlSession.close();    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="7-3、分页插件"><a href="#7-3、分页插件" class="headerlink" title="7.3、分页插件"></a>7.3、分页插件</h3><p><img src="https://s3.ax1x.com/2021/01/09/sKvSiV.png"></p><p>了解即可，万一 以后公司的架构师，说要使用，你需要知道它是什么东西！</p><h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><h3 id="8-1、面向接口编程"><a href="#8-1、面向接口编程" class="headerlink" title="8.1、面向接口编程"></a>8.1、面向接口编程</h3><p>- 大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程<br>- <strong>根本原因 :  ==解耦== , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong><br>- 在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；<br>- 而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p><p><strong>关于接口的理解</strong></p><p>- 接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。<br>- 接口的本身反映了系统设计人员对系统的抽象理解。<br>- 接口应有两类：<br>  - 第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；<br>  - 第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；<br>- 一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p><p><strong>三个面向区别</strong></p><p>- 面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法 .<br>- 面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 .<br>- 接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</p><h3 id="8-2、使用注解开发"><a href="#8-2、使用注解开发" class="headerlink" title="8.2、使用注解开发"></a>8.2、使用注解开发</h3><ol><li><p>注解在接口上实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Select(&quot;select * from user&quot;)List&lt;User&gt; getUsers();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>需要再核心配置文件中绑定接口！</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--绑定接口--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p></li></ol><p>本质：反射机制实现</p><p>底层：动态代理！</p><p><img src="https://img.imgdb.cn/item/5ff898513ffa7d37b367af16.png"></p><p><strong>Mybatis详细的执行流程！</strong></p><p><img src="https://s3.ax1x.com/2021/01/09/sKvpGT.png"></p><h3 id="8-3、CRUD"><a href="#8-3、CRUD" class="headerlink" title="8.3、CRUD"></a>8.3、CRUD</h3><p>我们可以在工具类创建的时候实现自动提交事务！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static SqlSession  getSqlSession()&#123;    return sqlSessionFactory.openSession(true);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编写接口，增加注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserMapper &#123;    @Select(&quot;select * from user&quot;)    List&lt;User&gt; getUsers();    &#x2F;&#x2F; 方法存在多个参数，所有的参数前面必须加上 @Param(&quot;id&quot;)注解    @Select(&quot;select * from user where id &#x3D; #&#123;id&#125;&quot;)    User getUserByID(@Param(&quot;id&quot;) int id);    @Insert(&quot;insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)    int addUser(User user);        @Update(&quot;update user set name&#x3D;#&#123;name&#125;,pwd&#x3D;#&#123;password&#125; where id &#x3D; #&#123;id&#125;&quot;)    int updateUser(User user);        @Delete(&quot;delete from user where id &#x3D; #&#123;uid&#125;&quot;)    int deleteUser(@Param(&quot;uid&quot;) int id);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><p>【注意：我们必须要讲接口注册绑定到我们的核心配置文件中！】</p><p><strong>关于@Param() 注解</strong></p><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li><li>我们在SQL中引用的就是我们这里的 @Param() 中设定的属性名！</li></ul><p><strong>#{}     ${} 区别</strong></p><h2 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>java library</li><li>plugs</li><li>build tools</li><li>with one annotation your class</li></ul><p>使用步骤：</p><ol><li><p>在IDEA中安装Lombok插件！</p></li><li><p>在项目中导入lombok的jar包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在实体类上加注解即可！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@AllArgsConstructor@NoArgsConstructor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Getter and @Setter@FieldNameConstants@ToString@EqualsAndHashCode@AllArgsConstructor, @RequiredArgsConstructor and @NoArgsConstructor@Log, @Log4j, @Log4j2, @Slf4j, @XSlf4j, @CommonsLog, @JBossLog, @Flogger@Data@Builder@Singular@Delegate@Value@Accessors@Wither@SneakyThrows<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><pre class="line-numbers language-none"><code class="language-none">@Data：无参构造，get、set、tostring、hashcode，equals@AllArgsConstructor@NoArgsConstructor@EqualsAndHashCode@ToString@Getter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><p>多对一：</p><p><img src="https://s3.ax1x.com/2021/01/09/sKv9RU.png"></p><ul><li>多个学生，对应一个老师</li><li>对于学生这边而言，  <strong>关联</strong> ..  多个学生，关联一个老师  【多对一】</li><li>对于老师而言， <strong>集合</strong> ， 一个老师，有很多学生 【一对多】</li></ul><p><img src="https://s3.ax1x.com/2021/01/09/sKvCzF.png"></p><p>SQL：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE &#96;teacher&#96; (  &#96;id&#96; INT(10) NOT NULL,  &#96;name&#96; VARCHAR(30) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8INSERT INTO teacher(&#96;id&#96;, &#96;name&#96;) VALUES (1, &#39;秦老师&#39;); CREATE TABLE &#96;student&#96; (  &#96;id&#96; INT(10) NOT NULL,  &#96;name&#96; VARCHAR(30) DEFAULT NULL,  &#96;tid&#96; INT(10) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;),  KEY &#96;fktid&#96; (&#96;tid&#96;),  CONSTRAINT &#96;fktid&#96; FOREIGN KEY (&#96;tid&#96;) REFERENCES &#96;teacher&#96; (&#96;id&#96;)) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;1&#39;, &#39;小明&#39;, &#39;1&#39;); INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;2&#39;, &#39;小红&#39;, &#39;1&#39;); INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;3&#39;, &#39;小张&#39;, &#39;1&#39;); INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;4&#39;, &#39;小李&#39;, &#39;1&#39;); INSERT INTO &#96;student&#96; (&#96;id&#96;, &#96;name&#96;, &#96;tid&#96;) VALUES (&#39;5&#39;, &#39;小王&#39;, &#39;1&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><ol><li>导入lombok</li><li>新建实体类 Teacher，Student</li><li>建立Mapper接口</li><li>建立Mapper.XML文件</li><li>在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】</li><li>测试查询是否能够成功！</li></ol><h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    思路:        1. 查询所有的学生信息        2. 根据查询出来的学生的tid，寻找对应的老师！  子查询    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudent<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from teacher where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--按照结果嵌套处理--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select s.id sid,s.name sname,t.name tname    from student s,teacher t    where s.tid = t.id;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回顾Mysql 多对一查询方式：</p><ul><li>子查询</li><li>联表查询</li></ul><h2 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h2><p>比如：一个老师拥有多个学生！</p><p>对于老师而言，就是一对多的关系!</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li>环境搭建，和刚才一样</li></ol><p><strong>实体类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class Student &#123;    private int id;    private String name;    private int tid;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class Teacher &#123;    private int id;    private String name;    &#x2F;&#x2F;一个老师拥有多个学生    private List&lt;Student&gt; students;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--按结果嵌套查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select s.id sid, s.name sname, t.name tname,t.id tid    from student s,teacher t    where s.tid = t.id and t.id = #&#123;tid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection    javaType="" 指定属性的类型！    集合中的泛型信息，我们使用ofType获取    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按照查询嵌套处理-1"><a href="#按照查询嵌套处理-1" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.teacher where id = #&#123;tid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.student where tid = #&#123;tid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>关联 - association   【多对一】</li><li>集合 - collection   【一对多】</li><li>javaType    &amp;   ofType<ol><li>JavaType  用来指定实体类中属性的类型</li><li>ofType  用来指定映射到List或者集合中的 pojo类型，泛型中的约束类型！</li></ol></li></ol><p>注意点：</p><ul><li>保证SQL的可读性，尽量保证通俗易懂</li><li>注意一对多和多对一中，属性名和字段的问题！</li><li>如果问题不好排查错误，可以使用日志 ， 建议使用 Log4j</li></ul><p><strong>慢SQL       1s        1000s</strong>      </p><p>面试高频</p><ul><li>Mysql引擎</li><li>InnoDB底层原理</li><li>索引</li><li>索引优化！</li></ul><h2 id="12、动态-SQL"><a href="#12、动态-SQL" class="headerlink" title="12、动态 SQL"></a>12、动态 SQL</h2><p>==<strong>什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong>==</p><p>利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。ifchoose (when, otherwise)trim (where, set)foreach<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE &#96;blog&#96; (  &#96;id&#96; varchar(50) NOT NULL COMMENT &#39;博客id&#39;,  &#96;title&#96; varchar(100) NOT NULL COMMENT &#39;博客标题&#39;,  &#96;author&#96; varchar(30) NOT NULL COMMENT &#39;博客作者&#39;,  &#96;create_time&#96; datetime NOT NULL COMMENT &#39;创建时间&#39;,  &#96;views&#96; int(30) NOT NULL COMMENT &#39;浏览量&#39;) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个基础工程</p><ol><li><p>导包</p></li><li><p>编写配置文件</p></li><li><p>编写实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class Blog &#123;    private int id;    private String title;    private String author;    private Date createTime;    private int views;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写实体类对应Mapper接口 和 Mapper.XML文件</p></li></ol><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog where 1=1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and title = #&#123;title&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and author = #&#123;author&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                title = #&#123;title&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and author = #&#123;author&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>                and views = #&#123;views&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where,set)"></a>trim (where,set)</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">select * from mybatis.blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        title = #&#123;title&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and author = #&#123;author&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            title = #&#123;title&#125;,        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            author = #&#123;author&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==<strong>所谓的动态SQL，本质还是SQL语句 ， 只是我们可以在SQL层面，去执行一个逻辑代码</strong>==</p><p>if</p><p>where ， set  ， choose ，when</p><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p><ol><li><p>使用SQL标签抽取公共的部分</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        title = #&#123;title&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and author = #&#123;author&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在需要使用的地方使用Include标签引用即可</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>注意事项：</p><ul><li>最好基于单表来定义SQL片段！</li><li>不要存在where标签</li></ul><h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select * from user where 1&#x3D;1 and   &lt;foreach item&#x3D;&quot;id&quot; collection&#x3D;&quot;ids&quot;      open&#x3D;&quot;(&quot; separator&#x3D;&quot;or&quot; close&#x3D;&quot;)&quot;&gt;        #&#123;id&#125;  &lt;&#x2F;foreach&gt;(id&#x3D;1 or id&#x3D;2 or id&#x3D;3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.ax1x.com/2021/01/09/sKvFsJ.png"></p><p><img src="https://img.imgdb.cn/item/5ff89a403ffa7d37b3685aa0.png"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        select * from mybatis.blog where 1=1 and (id=1 or id = 2 or id=3)        我们现在传递一个万能的map ， 这map中可以存在一个集合！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>and (<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            id = #&#123;id&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了==</p><p>建议：</p><ul><li>现在Mysql中写出完整的SQL,再对应的去修改成为我们的动态SQL实现通用即可！</li></ul><h2 id="13、缓存-（了解）"><a href="#13、缓存-（了解）" class="headerlink" title="13、缓存 （了解）"></a>13、缓存 （了解）</h2><h3 id="13-1、简介"><a href="#13-1、简介" class="headerlink" title="13.1、简介"></a>13.1、简介</h3><pre class="line-numbers language-none"><code class="language-none">查询  ：  连接数据库 ，耗资源！一次查询的结果，给他暂存在一个可以直接取到的地方！--&gt; 内存 ： 缓存我们再次查询相同数据的时候，直接走缓存，就不用走数据库了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>什么是缓存 [ Cache ]？</p><ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul></li><li><p>为什么使用缓存？</p><ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li></ul></li><li><p>什么样的数据能使用缓存？</p><ul><li>经常查询并且不经常改变的数据。【可以使用缓存】</li></ul></li></ol><h3 id="13-2、Mybatis缓存"><a href="#13-2、Mybatis缓存" class="headerlink" title="13.2、Mybatis缓存"></a>13.2、Mybatis缓存</h3><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p><ul><li><p>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</p></li><li><p>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</p></li><li><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p></li></ul></li></ul><h3 id="13-3、一级缓存"><a href="#13-3、一级缓存" class="headerlink" title="13.3、一级缓存"></a>13.3、一级缓存</h3><ul><li>一级缓存也叫本地缓存：  SqlSession<ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li></ul></li></ul><p>测试步骤：</p><ol><li>开启日志！</li><li>测试在一个Sesion中查询两次相同记录</li><li>查看日志输出</li></ol><p><img src="https://img.imgdb.cn/item/5ff89ab63ffa7d37b3688c2a.png"></p><p>缓存失效的情况：</p><ol><li><p>查询不同的东西</p></li><li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p><p><img src="https://img.imgdb.cn/item/5ff89ac23ffa7d37b3689260.png"></p></li><li><p>查询不同的Mapper.xml</p></li><li><p>手动清理缓存！</p><p><img src="https://img.imgdb.cn/item/5ff89ace3ffa7d37b3689915.png"></p></li></ol><p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p><p>一级缓存就是一个Map。</p><h3 id="13-4、二级缓存"><a href="#13-4、二级缓存" class="headerlink" title="13.4、二级缓存"></a>13.4、二级缓存</h3><ul><li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li><li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li><li>工作机制<ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li></ul></li></ul><p>步骤：</p><ol><li><p>开启全局缓存</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--显示的开启全局缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在要使用二级缓存的Mapper中开启</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--在当前Mapper.xml中使用二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以自定义参数</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--在当前Mapper.xml中使用二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>  <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>       <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>       <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>       <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><ol><li><p>问题:我们需要将实体类序列化！否则就会报错！</p><pre class="line-numbers language-none"><code class="language-none">Caused by: java.io.NotSerializableException: com.kuang.pojo.User<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ol><p>小结：</p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效</li><li>所有的数据都会先放在一级缓存中；</li><li>只有当会话提交，或者关闭的时候，才会提交到二级缓冲中！</li></ul><h3 id="13-5、缓存原理"><a href="#13-5、缓存原理" class="headerlink" title="13.5、缓存原理"></a>13.5、缓存原理</h3><p><img src="https://img.imgdb.cn/item/5ff89adc3ffa7d37b368a023.png"></p><h3 id="13-6、自定义缓存-ehcache"><a href="#13-6、自定义缓存-ehcache" class="headerlink" title="13.6、自定义缓存-ehcache"></a>13.6、自定义缓存-ehcache</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要在程序中使用ehcache，先要导包！</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.caches<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在mapper中指定使用我们的ehcache缓存实现！</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--在当前Mapper.xml中使用二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.caches.ehcache.EhcacheCache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ehcache.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://ehcache.org/ehcache.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">updateCheck</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：       user.home – 用户主目录       user.dir  – 用户当前工作目录       java.io.tmpdir – 默认临时文件路径     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./tmpdir/Tmp_EhCache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>            <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span>            <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>259200<span class="token punctuation">"</span></span>            <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cloud_user<span class="token punctuation">"</span></span>            <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span>            <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>            <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。     --></span>    <span class="token comment">&lt;!--      name:缓存名称。      maxElementsInMemory:缓存最大数目      maxElementsOnDisk：硬盘最大缓存个数。      eternal:对象是否永久有效，一但设置了，timeout将不起作用。      overflowToDisk:是否保存到磁盘，当系统当机时      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。      clearOnFlush：内存数量最大时是否清除。      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。      FIFO，first in first out，这个是大家最熟的，先进先出。      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。   --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Redis数据库来做缓存！  K-V</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery效果</title>
      <link href="2020/12/19/jquery-xiao-guo/"/>
      <url>2020/12/19/jquery-xiao-guo/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery-效果-隐藏和显示"><a href="#jQuery-效果-隐藏和显示" class="headerlink" title="jQuery 效果- 隐藏和显示"></a>jQuery 效果- 隐藏和显示</h2><h3 id="jQuery-hide-和-show"><a href="#jQuery-hide-和-show" class="headerlink" title="jQuery hide() 和 show()"></a>jQuery hide() 和 show()</h3><p>通过 jQuery，您可以使用 hide() 和 show() 方法来隐藏和显示 HTML 元素：</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;#hide&quot;).click(function()&#123;  $(&quot;p&quot;).hide();&#125;); $(&quot;#show&quot;).click(function()&#123;  $(&quot;p&quot;).show();&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>语法:</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(selector).hide(speed,callback);$(selector).show(speed,callback);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是隐藏或显示完成后所执行的函数名称。</p><p>下面的例子演示了带有 speed 参数的 hide() 方法：</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;button&quot;).click(function()&#123;  $(&quot;p&quot;).hide(1000); &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面的例子演示了带有 speed 参数的 hide() 方法，并使用回调函数：</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(document).ready(function()&#123;  $(&quot;.hidebtn&quot;).click(function()&#123;    $(&quot;div&quot;).hide(1000,&quot;linear&quot;,function()&#123;      alert(&quot;Hide() 方法已完成!&quot;);    &#125;);  &#125;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个参数是一个字符串，表示过渡使用哪种缓动函数。（译者注：jQuery自身提供”linear” 和 “swing”，其他可以使用相关的插件）。</p><h3 id="jQuery-toggle"><a href="#jQuery-toggle" class="headerlink" title="jQuery toggle()"></a>jQuery toggle()</h3><p>通过 jQuery，您可以使用 toggle() 方法来切换 hide() 和 show() 方法。</p><p>显示被隐藏的元素，并隐藏已显示的元素：</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;button&quot;).click(function()&#123;  $(&quot;p&quot;).toggle();&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>语法:</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(selector).toggle(speed,callback);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是隐藏或显示完成后所执行的函数名称。</p><h2 id="jQuery-效果-淡入淡出"><a href="#jQuery-效果-淡入淡出" class="headerlink" title="jQuery 效果 - 淡入淡出"></a>jQuery 效果 - 淡入淡出</h2><h3 id="jQuery-Fading-方法"><a href="#jQuery-Fading-方法" class="headerlink" title="jQuery Fading 方法"></a>jQuery Fading 方法</h3><p>通过 jQuery，您可以实现元素的淡入淡出效果。</p><p>jQuery 拥有下面四种 fade 方法：</p><ul><li><p>fadeIn()</p></li><li><p>fadeOut()</p></li><li><p>fadeToggle()</p></li><li><p>fadeTo()</p></li></ul><h3 id="jQuery-fadeIn-方法"><a href="#jQuery-fadeIn-方法" class="headerlink" title="jQuery fadeIn() 方法"></a>jQuery fadeIn() 方法</h3><p>jQuery fadeIn() 用于淡入已隐藏的元素。</p><p><strong>语法:</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(selector).fadeIn(speed,callback);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。.</p><p>可选的 callback 参数是 fading 完成后所执行的函数名称。</p><p>下面的例子演示了带有不同参数的 fadeIn() 方法：</p><pre class="line-numbers language-none"><code class="language-none">$(&quot;button&quot;).click(function()&#123;  $(&quot;#div1&quot;).fadeIn();  $(&quot;#div2&quot;).fadeIn(&quot;slow&quot;);  $(&quot;#div3&quot;).fadeIn(3000);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jQuery-fadeOut-方法"><a href="#jQuery-fadeOut-方法" class="headerlink" title="jQuery fadeOut() 方法"></a>jQuery fadeOut() 方法</h3><p>jQuery fadeOut() 方法用于淡出可见元素。</p><p><strong>语法:</strong></p><pre class="line-numbers language-none"><code class="language-none">$(selector).fadeOut(speed,callback);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是 fading 完成后所执行的函数名称。</p><p>下面的例子演示了带有不同参数的 fadeOut() 方法：</p><pre class="line-numbers language-none"><code class="language-none">$(&quot;button&quot;).click(function()&#123;  $(&quot;#div1&quot;).fadeOut();  $(&quot;#div2&quot;).fadeOut(&quot;slow&quot;);  $(&quot;#div3&quot;).fadeOut(3000);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jQuery-fadeToggle-方法"><a href="#jQuery-fadeToggle-方法" class="headerlink" title="jQuery fadeToggle() 方法"></a>jQuery fadeToggle() 方法</h3><p>jQuery fadeToggle() 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换。</p><p>如果元素已淡出，则 fadeToggle() 会向元素添加淡入效果。</p><p>如果元素已淡入，则 fadeToggle() 会向元素添加淡出效果。</p><p><strong>语法:</strong></p><pre class="line-numbers language-none"><code class="language-none">$(selector).fadeToggle(speed,callback);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是 fading 完成后所执行的函数名称。</p><p>下面的例子演示了带有不同参数的 fadeToggle() 方法：</p><pre class="line-numbers language-none"><code class="language-none">$(&quot;button&quot;).click(function()&#123;  $(&quot;#div1&quot;).fadeToggle();  $(&quot;#div2&quot;).fadeToggle(&quot;slow&quot;);  $(&quot;#div3&quot;).fadeToggle(3000);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jQuery-fadeTo-方法"><a href="#jQuery-fadeTo-方法" class="headerlink" title="jQuery fadeTo() 方法"></a>jQuery fadeTo() 方法</h3><p>jQuery fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。</p><p><strong>语法:</strong></p><pre class="line-numbers language-none"><code class="language-none">$(selector).fadeTo(speed,opacity,callback);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>必需的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>fadeTo() 方法中必需的 opacity 参数将淡入淡出效果设置为给定的不透明度（值介于 0 与 1 之间）。</p><p>可选的 callback 参数是该函数完成后所执行的函数名称。</p><p>下面的例子演示了带有不同参数的 fadeTo() 方法：</p><pre class="line-numbers language-none"><code class="language-none">$(&quot;button&quot;).click(function()&#123;  $(&quot;#div1&quot;).fadeTo(&quot;slow&quot;,0.15);  $(&quot;#div2&quot;).fadeTo(&quot;slow&quot;,0.4);  $(&quot;#div3&quot;).fadeTo(&quot;slow&quot;,0.7);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一、注意大小写，fadeIn()   fadeOut()   fadeToggle()   fadeTo()  大小写不能变。</p><p>二、fadeTo()  没有默认参数，必须加上  slow/fast/Time </p>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery效果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用jQuery事件与方法</title>
      <link href="2020/12/19/chang-yong-jquery-shi-jian-yu-fang-fa/"/>
      <url>2020/12/19/chang-yong-jquery-shi-jian-yu-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="常用jQuery事件与方法"><a href="#常用jQuery事件与方法" class="headerlink" title="常用jQuery事件与方法"></a>常用jQuery事件与方法</h1><h3 id="document-ready"><a href="#document-ready" class="headerlink" title="$(document).ready()"></a>$(document).ready()</h3><p>$(document).ready() 方法允许我们在文档完全加载完后执行函数。该事件方法在 <a href="https://www.runoob.com/jquery/jquery-syntax.html">jQuery 语法</a> 章节中已经提到过。</p><h3 id="click"><a href="#click" class="headerlink" title="click()"></a>click()</h3><p>click() 方法是当按钮点击事件被触发时会调用一个函数。</p><p>该函数在用户点击 HTML 元素时执行。</p><p>在下面的实例中，当点击事件在某个 <p> 元素上触发时，隐藏当前的 <p> 元素：</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;p&quot;).click(function()&#123;  $(this).hide();&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="dblclick"><a href="#dblclick" class="headerlink" title="dblclick()"></a>dblclick()</h3><p>当双击元素时，会发生 dblclick 事件。</p><p>dblclick() 方法触发 dblclick 事件，或规定当发生 dblclick 事件时运行的函数：</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;p&quot;).dblclick(function()&#123;  $(this).hide();&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="mouseenter"><a href="#mouseenter" class="headerlink" title="mouseenter()"></a>mouseenter()</h3><p>当鼠标指针穿过元素时，会发生 mouseenter 事件。</p><p>mouseenter() 方法触发 mouseenter 事件，或规定当发生 mouseenter 事件时运行的函数：</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;#p1&quot;).mouseenter(function()&#123;    alert(&#39;您的鼠标移到了 id&#x3D;&quot;p1&quot; 的元素上!&#39;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="mouseleave"><a href="#mouseleave" class="headerlink" title="mouseleave()"></a>mouseleave()</h3><p>当鼠标指针离开元素时，会发生 mouseleave 事件。</p><p>mouseleave() 方法触发 mouseleave 事件，或规定当发生 mouseleave 事件时运行的函数：</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;#p1&quot;).mouseleave(function()&#123;    alert(&quot;再见，您的鼠标离开了该段落。&quot;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="mousedown"><a href="#mousedown" class="headerlink" title="mousedown()"></a>mousedown()</h3><p>当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。</p><p>mousedown() 方法触发 mousedown 事件，或规定当发生 mousedown 事件时运行的函数：</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;#p1&quot;).mousedown(function()&#123;    alert(&quot;鼠标在该段落上按下！&quot;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="mouseup"><a href="#mouseup" class="headerlink" title="mouseup()"></a>mouseup()</h3><p>当在元素上松开鼠标按钮时，会发生 mouseup 事件。</p><p>mouseup() 方法触发 mouseup 事件，或规定当发生 mouseup 事件时运行的函数：</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;#p1&quot;).mouseup(function()&#123;    alert(&quot;鼠标在段落上松开。&quot;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="hover"><a href="#hover" class="headerlink" title="hover()"></a>hover()</h3><p>hover()方法用于模拟光标悬停事件。</p><p>当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)。</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;#p1&quot;).hover(    function()&#123;        alert(&quot;你进入了 p1!&quot;);    &#125;,    function()&#123;        alert(&quot;拜拜! 现在你离开了 p1!&quot;);    &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="focus"><a href="#focus" class="headerlink" title="focus()"></a>focus()</h3><p>当元素获得焦点时，发生 focus 事件。</p><p>当通过鼠标点击选中元素或通过 tab 键定位到元素时，该元素就会获得焦点。</p><p>focus() 方法触发 focus 事件，或规定当发生 focus 事件时运行的函数：</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;input&quot;).focus(function()&#123;  $(this).css(&quot;background-color&quot;,&quot;#cccccc&quot;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="blur"><a href="#blur" class="headerlink" title="blur()"></a>blur()</h3><p>当元素失去焦点时，发生 blur 事件。</p><p>blur() 方法触发 blur 事件，或规定当发生 blur 事件时运行的函数：</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;input&quot;).blur(function()&#123;  $(this).css(&quot;background-color&quot;,&quot;#ffffff&quot;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery基本选择器</title>
      <link href="2020/11/28/jquery-ji-ben-xuan-ze-qi/"/>
      <url>2020/11/28/jquery-ji-ben-xuan-ze-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery入门之基本选择器"><a href="#jQuery入门之基本选择器" class="headerlink" title="jQuery入门之基本选择器"></a>jQuery入门之基本选择器</h1><h2 id="一、元素选择器"><a href="#一、元素选择器" class="headerlink" title="一、元素选择器"></a>一、元素选择器</h2><p><strong>含义</strong><br>元素选择器，用于选中相同的元素，然后对相同的元素进行操作</p><p><strong>语法</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;元素名&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>举例</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(function()&#123;$(&quot;div&quot;).css(&quot;color&quot;,&quot;red&quot;);&#125;);&lt;xmp&gt;&lt;div&gt;我爱学习&lt;&#x2F;div&gt;&lt;&#x2F;xmp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、id选择器"><a href="#二、id选择器" class="headerlink" title="二、id选择器"></a>二、id选择器</h2><p><strong>含义</strong></p><p>id选择器，用于选中某个id的元素，然后对该元素进行各种操作。<br><strong>语法</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;#id名&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>举例</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(function()&#123;$(&quot;#xuexi&quot;).css(&quot;color&quot;,&quot;red&quot;);&#125;);&lt;xmp&gt;&lt;div id&#x3D;&quot;xuexi&quot;&gt;我爱学习&lt;&#x2F;div&gt;&lt;&#x2F;xmp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><p>$(“#xuexi”).css(“color”,”red”);表示选中id=”xuexi”的元素，然后定义其颜色为红色。</p><p><strong>说明</strong><br>id名前面必须加上前缀井号（#），否则该选择器无法生效。在id名前面加上“#”，表示这是一个id选择器。</p><h2 id="三、class选择器"><a href="#三、class选择器" class="headerlink" title="三、class选择器"></a>三、class选择器</h2><p><strong>含义</strong><br>class选择器，就是我们常说的“类选择器”。我们可以对“相同的元素”或者“不同的元素”定义一个相同的class，然后针对这个class的元素进行各种操作。<br><strong>语法</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;.类名&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>举例</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(function()&#123;$(&quot;.xuexi&quot;).css(&quot;color&quot;,&quot;red&quot;);&#125;);&lt;xmp&gt;&lt;div class&#x3D;&quot;xuexi&quot;&gt;我爱学习&lt;&#x2F;div&gt;&lt;&#x2F;xmp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><p>$(“.xuexi”).css(“color”,”red”)表示选中class=”xuexi”的所有元素，然后定义这些元素的颜色为红色。</p><p><strong>说明</strong><br>类名前面必须加上前缀英文句号（.），否则该选择器无法生效。类名前面加上英文句号（.），表示这是一个class选择器。</p><h2 id="四、群组选择器"><a href="#四、群组选择器" class="headerlink" title="四、群组选择器"></a>四、群组选择器</h2><p><strong>含义</strong><br>群组选择器，用于同时对几个选择器进行相同的操作。<br><strong>语法</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;选择器1,选择器2,...,选择器n&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>举例</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(function()&#123;$(&quot;div,p,span&quot;).css(&quot;color&quot;,&quot;red&quot;);&#125;);&lt;xmp&gt;&lt;div&gt;我爱学习&lt;&#x2F;div&gt;&lt;p&gt;我爱学习&lt;&#x2F;p&gt;&lt;span&gt;我爱学习&lt;&#x2F;span&gt;&lt;div&gt;我爱学习&lt;&#x2F;div&gt;&lt;&#x2F;xmp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong><br>$(“,div,p,span”).css(“color”,”red”)表示选中所有的h3、div、p和span，然后定义这些元素的字体颜色为红色。<br><strong>上面这段代码其实等价于：</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(function()&#123;$(&quot;div&quot;).css(&quot;color&quot;,&quot;red&quot;);$(&quot;p&quot;).css(&quot;color&quot;,&quot;red&quot;);$(&quot;span&quot;).css(&quot;color&quot;,&quot;red&quot;);&#125;);&lt;xmp&gt;&lt;div&gt;我爱学习&lt;&#x2F;div&gt;&lt;p&gt;我爱学习&lt;&#x2F;p&gt;&lt;span&gt;我爱学习&lt;&#x2F;span&gt;&lt;div&gt;我爱学习&lt;&#x2F;div&gt;&lt;&#x2F;xmp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery属性选择器</title>
      <link href="2020/11/28/jquery-shu-xing-xuan-ze-qi/"/>
      <url>2020/11/28/jquery-shu-xing-xuan-ze-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery入门之属性选择器"><a href="#jQuery入门之属性选择器" class="headerlink" title="jQuery入门之属性选择器"></a>jQuery入门之属性选择器</h1><p><strong>含义</strong><br>属性选择器，指的是通过“元素的属性”来选择元素的一种基础选择器。例如下面这句代码中的id、type、value就是input元素的属性。</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">&lt;xmp&gt;&lt;input id&#x3D;&quot;btn&quot; type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; &#x2F;&gt;&lt;&#x2F;xmp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>·选取含有class属性的div元素。</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;div[class]&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>·选取type取值为checkbox属性的input元素。</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;input[type&#x3D;&#39;checkbox&#39;]&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>··选取type取值不是checkbox属性的input元素。</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;input[type!&#x3D;&#39;checkbox&#39;]&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>·选取class属性包含nav的div元素(class属性可以包含多个值)。</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;div[class&#x3D;&#39;nav&#39;]&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>·选取class属性以nav开头的div元素，</strong>例如<div class="nav-header"></div>。</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;div[class^&#x3D;&#39;nav&#39;]&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>·选取class属性以nav结尾的div元素，</strong>例如<div class="first-nav"></div>。</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;div[class$&#x3D;&#39;nav&#39;]&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>·选取带有id属性并且class属性是以nav开头的div元素，</strong>例如&lt;div id=”container”class=”nav-header”&gt;</div>。</p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;div[id][class^&#x3D;&#39;nav&#39;]&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>举例</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(function()&#123;$(&quot;li[class]&quot;).css(&quot;color&quot;,&quot;red&quot;);&#125;);&lt;xmp&gt;&lt;ul&gt;    &lt;li&gt;HTML&lt;&#x2F;li&gt;    &lt;li class&#x3D;&quot;select&quot;&gt;CSS&lt;&#x2F;li&gt;    &lt;li&gt;JavaScript&lt;&#x2F;li&gt;    &lt;li class&#x3D;&quot;select&quot;&gt;jQuery&lt;&#x2F;li&gt;    &lt;li&gt;Vue.js&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;xmp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong><br>$(“li[class]”)表示选取带有class属性的li元素。</p>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery层次选择器</title>
      <link href="2020/11/28/jquery-ceng-ci-xuan-ze-qi/"/>
      <url>2020/11/28/jquery-ceng-ci-xuan-ze-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery入门之层次选择器"><a href="#jQuery入门之层次选择器" class="headerlink" title="jQuery入门之层次选择器"></a>jQuery入门之层次选择器</h1><h2 id="一、后代选择器"><a href="#一、后代选择器" class="headerlink" title="一、后代选择器"></a>一、后代选择器</h2><p><strong>含义</strong><br>后代选择器，用于选择元素内部的所有某一种元素，包括子元素和其他后代元素。</p><p><strong>语法</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;M N&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明</strong></p><p>“M元素”和“N元素”之间用空格隔开，表示选中M元素内部的后代N元素（即所有N元素）。</p><p><strong>举例</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(function()&#123;$(&quot;first p&quot;).css(&quot;color&quot;,&quot;red&quot;);&#125;);&lt;xmp&gt;&lt;div id&#x3D;&quot;first&quot;&gt;&lt;p&gt;我爱学习&lt;&#x2F;p&gt;    &lt;div id&#x3D;&quot;second&quot;&gt;    &lt;p&gt;我爱学习&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;p&gt;我爱学习&lt;&#x2F;p&gt;    &lt;p&gt;我爱学习&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;xmp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><p>$(“#first p”)表示选取id=”first”的元素内部的所有p元素。</p><p>因此，不管是子元素，还是其他后代元素，全部都会被选中。</p><h2 id="二、子代选择器"><a href="#二、子代选择器" class="headerlink" title="二、子代选择器"></a>二、子代选择器</h2><p><strong>含义</strong></p><p>子代选择器，用于选中元素内部的某一种子元素。子代选择器与后代选择器虽然很相似，但是也有着明显的区别。</p><p>·后代选择器，选取的是元素内部所有的元素（包括子元素、孙元素等）。</p><p>·子代选择器，选取的是元素内部的某一种子元素（只限子元素）。</p><p><strong>语法</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;M&gt;N&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明</strong><br>“M元素”和“N元素”之间使用“&gt;”选择符，表示选中M元素内部的子元素N。<br><strong>举例</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(function()&#123;$(&quot;first&gt;p&quot;).css(&quot;color&quot;,&quot;red&quot;);&#125;);&lt;xmp&gt;&lt;div id&#x3D;&quot;first&quot;&gt;&lt;p&gt;我爱学习&lt;&#x2F;p&gt;    &lt;div id&#x3D;&quot;second&quot;&gt;    &lt;p&gt;我爱学习&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;p&gt;我爱学习&lt;&#x2F;p&gt;    &lt;p&gt;我爱学习&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;xmp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><p>$(“#first&gt;p”)表示选中id=”first”的元素下的子元素p。</p><p>我们将这个例子与后代选择器的例子对比一下，就可以很清楚地知道：<strong>子代选择器只选取子元素，不包括其他后代元素。</strong></p><h2 id="三、兄弟选择器"><a href="#三、兄弟选择器" class="headerlink" title="三、兄弟选择器"></a>三、兄弟选择器</h2><p><strong>含义</strong><br>兄弟选择器，用于选中元素后面（不包括前面）的某一类兄弟元素。<br><strong>语法</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;M~N&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明</strong><br>类名前面必须加上前缀英文句号（.），否则该选择器无法生效。类名前面加上英文句号（.），表示这是一个class选择器。</p><p><strong>举例</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(function()&#123;$(&quot;#second~p&quot;).css(&quot;color&quot;,&quot;red&quot;);&#125;);&lt;xmp&gt;&lt;div id&#x3D;&quot;first&quot;&gt;&lt;p&gt;我爱学习&lt;&#x2F;p&gt;    &lt;div id&#x3D;&quot;second&quot;&gt;    &lt;p&gt;我爱学习&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;p&gt;我爱学习&lt;&#x2F;p&gt;    &lt;p&gt;我爱学习&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;xmp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><p>$(“#second~p”)表示选取id=”second”的元素后面所有的兄弟元素p。记住，兄弟选择器只选取后面所有的兄弟元素，不包括前面的所有兄弟元素。</p><h2 id="四、相邻选择器"><a href="#四、相邻选择器" class="headerlink" title="四、相邻选择器"></a>四、相邻选择器</h2><p><strong>含义</strong><br>相邻选择器，用于选中元素后面（不包括前面）的某一个“相邻”的兄弟元素。相邻选择器与兄弟选择器也非常相似，不过也有明显的区别。</p><p>·兄弟选择器选取元素后面“所有”的某一类元素。</p><p>·相邻选择器选取元素后面“相邻”的某一个元素。</p><p><strong>语法</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(&quot;M+N&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明</strong><br>“M元素”和“N元素”之间使用“+”选择符，表示选中M元素后面的相邻的兄弟元素N。</p><p><strong>举例</strong></p><pre class="line-numbers language-jQuery" data-language="jQuery"><code class="language-jQuery">$(function()&#123;$(&quot;#second+p&quot;).css(&quot;color&quot;,&quot;red&quot;);&#125;);&lt;xmp&gt;&lt;div id&#x3D;&quot;first&quot;&gt;&lt;p&gt;我爱学习&lt;&#x2F;p&gt;    &lt;div id&#x3D;&quot;second&quot;&gt;    &lt;p&gt;我爱学习&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;p&gt;我爱学习&lt;&#x2F;p&gt;    &lt;p&gt;我爱学习&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;xmp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong><br>$(“#second+p”)表示选取id=”second”的元素后面的“相邻”的兄弟元素p。</p>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery选择器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="404.html"/>
      <url>404.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>friends</title>
      <link href="friends/index.html"/>
      <url>friends/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
